import { defineStore } from "pinia";
import { useCookies } from "@vueuse/integrations/useCookies";
const useAuthStore = defineStore("auth", {
  state: () => ({
    key: null,
    // üîë Backend session key
    id_customer: null,
    name: null,
    isAuthenticated: false,
    loading: false,
    error: null,
    mobileNumber: "",
    // User input mobile number
    newCustomer: false
    // Flag for new users
  }),
  actions: {
    /** -------------------------------
     * üîë Set customer session (Pinia + cookies only)
     * ------------------------------- */
    setCustomer(payload) {
      if (!payload || !payload.key) {
        console.warn("[Auth Store] ‚ö†Ô∏è Invalid payload:", payload);
        return;
      }
      this.key = payload.key;
      this.id_customer = payload.id_customer;
      this.name = payload.name;
      this.isAuthenticated = true;
      const cookies = useCookies();
      cookies.set("key", this.key, { path: "/", sameSite: "lax" });
      cookies.set("id_customer", this.id_customer, { path: "/", sameSite: "lax" });
      cookies.set("name", this.name, { path: "/", sameSite: "lax" });
      console.log("[Auth Store] ‚úÖ Session persisted in cookies:", {
        key: this.key,
        id_customer: this.id_customer,
        name: this.name
      });
    },
    loadSession() {
    },
    // ‚úÖ New helper: Call once on app startup
    initAuth() {
      console.log("[Auth Store] üöÄ Initializing auth...");
      this.loadSession();
    },
    logout() {
      this.key = null;
      this.id_customer = null;
      this.name = null;
      this.isAuthenticated = false;
      const cookies = useCookies();
      cookies.remove("key");
      cookies.remove("id_customer");
      cookies.remove("name");
      console.log("[Auth Store] ‚ùå Session cleared");
    },
    /** -------------------------------
     * üì© Send login OTP
     * ------------------------------- */
    async sendLoginOTP() {
      this.loading = true;
      this.error = null;
      try {
        console.log("[Auth Store] üì© Sending OTP for mobile:", this.mobileNumber);
        const res = await $fetch("http://localhost:4000/send-otp", {
          method: "POST",
          body: { mobileNumber: this.mobileNumber, site: "yourSiteName" }
        });
        console.log("[Auth Store] üì© OTP Send Response:", res);
        return res;
      } catch (err) {
        this.error = err?.data?.error || "Send OTP failed";
        console.error("[Auth Store] ‚ùå Send OTP Error:", err);
        throw err;
      } finally {
        this.loading = false;
      }
    },
    /** -------------------------------
     * üì© Verify OTP
     * ------------------------------- */
    async verifyOtp(otp) {
      this.loading = true;
      this.error = null;
      try {
        console.log("[Auth Store] üì© Verifying OTP for mobile:", this.mobileNumber);
        const res = await $fetch("http://localhost:4000/verify-otp", {
          method: "POST",
          body: {
            mobileNumber: this.mobileNumber,
            otp,
            newCustomer: this.newCustomer,
            site: "yourSiteName"
          }
        });
        console.log("[Gateway Proxy] Response Status:", res.status);
        console.log("[Gateway Proxy] Response Data:", res);
        if (res.newUser) {
          this.newCustomer = true;
          console.log("[Auth Store] üîπ New user detected, registration required");
          return { newUser: true };
        }
        const sessionPayload = {
          key: res.key,
          id_customer: res.id_customer,
          name: res.first_name || res.email || "User"
        };
        this.setCustomer(sessionPayload);
        console.log("[Auth Store] ‚úÖ OTP verified and session stored in cookies:", sessionPayload);
        return res;
      } catch (err) {
        this.error = err?.data?.error || "Verify OTP failed";
        console.error("[Auth Store] ‚ùå OTP Verify Error:", err);
        throw err;
      } finally {
        this.loading = false;
      }
    },
    /** -------------------------------
     * üìù Login with password
     * ------------------------------- */
    async loginWithPassword(password) {
      this.loading = true;
      this.error = null;
      try {
        console.log("[Auth Store] üì© Login with password for mobile:", this.mobileNumber);
        const res = await $fetch("http://localhost:4000/login-password", {
          method: "POST",
          body: { mobileNumber: this.mobileNumber, password, site: "yourSiteName" }
        });
        this.setCustomer(res);
        console.log("[Auth Store] ‚úÖ Password login successful:", res);
        return res;
      } catch (err) {
        this.error = err?.data?.error || "Login failed";
        console.error("[Auth Store] ‚ùå Login Error:", err);
        throw err;
      } finally {
        this.loading = false;
      }
    },
    /** -------------------------------
     * üìù Register new user
     * ------------------------------- */
    async register(email, password) {
      this.loading = true;
      this.error = null;
      try {
        console.log("[Auth Store] üì© Registering mobile:", this.mobileNumber);
        const res = await $fetch("http://localhost:4000/register", {
          method: "POST",
          body: {
            mobileNumber: this.mobileNumber,
            email,
            password,
            site: "yourSiteName",
            checkout: false
          }
        });
        this.setCustomer(res);
        console.log("[Auth Store] ‚úÖ Registration successful:", res);
        return res;
      } catch (err) {
        this.error = err?.data?.error || "Register failed";
        console.error("[Auth Store] ‚ùå Register Error:", err);
        throw err;
      } finally {
        this.loading = false;
      }
    }
  }
});
export {
  useAuthStore as u
};
//# sourceMappingURL=auth-BNE6mzpu.js.map
