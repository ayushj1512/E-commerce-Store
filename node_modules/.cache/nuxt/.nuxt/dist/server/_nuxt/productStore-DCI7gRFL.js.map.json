{"file":"productStore-DCI7gRFL.js","mappings":"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","names":[],"sources":["../../../../../../../stores/productStore.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport { ref, computed, watch, onMounted } from \"vue\";\r\nimport { useRoute } from \"#app\";\r\nimport { ofetch } from \"ofetch\";\r\n\r\nexport const useProductStore = defineStore(\"productStore\", () => {\r\n  // State\r\n  const productLists = ref({}); // { [categoryId]: { products: [], currentPage: 1, total: 0 } }\r\n  const loading = ref(false);\r\n  const error = ref(null);\r\n\r\n  const API_URL = \"https://api.streetstylestore.com\";\r\n  const API_KEY = \"Bm23NaocNyDb2qWiT9Mpn4qXdSmq7bqdoLzY6espTB3MC6Rx\";\r\n\r\n  const route = useRoute();\r\n\r\n  // Utilities\r\n  const safeParseJSON = (str, fallback = {}) => {\r\n    try {\r\n      return JSON.parse(str);\r\n    } catch {\r\n      return fallback;\r\n    }\r\n  };\r\n\r\n  const slugify = (str) =>\r\n    str?.toString().toLowerCase().replace(/[^a-z0-9]+/g, \"-\").replace(/(^-|-$)+/g, \"\");\r\n\r\n  // Fetch products by category\r\n  const fetchProducts = async (options = {}) => {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const { categoryId, page = 1, perPage = 30, city, idBrand, shop, type } = options;\r\n\r\n      const childParam = route?.params?.child || \"\";\r\n      const parentParam = route?.params?.parent || \"\";\r\n\r\n      let resolvedCatId = categoryId;\r\n      if (!resolvedCatId) {\r\n        const match = (childParam !== \"all\" ? childParam : parentParam).match(/(\\d+)$/);\r\n        resolvedCatId = match ? match[1] : \"default\";\r\n      }\r\n\r\n      const filterParts = [];\r\n      if (resolvedCatId && !isNaN(Number(resolvedCatId))) filterParts.push(`categories:=${resolvedCatId}`);\r\n      if (city) filterParts.push(`deal_cities:=[${city}]`);\r\n      if (idBrand) filterParts.push(`id_brand:=${idBrand}`);\r\n      if (shop) filterParts.push(`sss_shops:=[${shop}]`);\r\n      if (type) filterParts.push(`product_type:=${type}`);\r\n\r\n      const filterStr = filterParts.join(\",\");\r\n      const safeFilterStr = encodeURIComponent(filterStr);\r\n\r\n      const url = `${API_URL}/collections/products/documents/search?q=*${\r\n        filterParts.length ? \"&filter_by=\" + safeFilterStr : \"\"\r\n      }&per_page=${perPage}&filter_by=active:=1&page=${page}`;\r\n\r\n      console.log(\"📦 Fetching products from URL:\", url);\r\n\r\n      const res = await ofetch(url, {\r\n        method: \"GET\",\r\n        headers: { \"x-typesense-api-key\": API_KEY },\r\n        retry: 1,\r\n      });\r\n\r\n      const data = Array.isArray(res.hits)\r\n        ? res.hits.map((hit) => {\r\n            const doc = hit.document ?? hit;\r\n            const parsedData = doc.product_data ? safeParseJSON(doc.product_data, {}) : {};\r\n            const firstData = parsedData[\"0\"] || {};\r\n\r\n            const sizes =\r\n              (parsedData.shoeSize || []).map((s) => s.Size).filter(Boolean) ||\r\n              (doc.product_all_sizes || []).filter(Boolean) ||\r\n              [\"N/A\"];\r\n\r\n            const categories = firstData.categories\r\n              ? firstData.categories.split(\"^\").map((c) => c.split(\"*\")[0])\r\n              : doc.categories?.map((c) => c.toString()) || [];\r\n\r\n            const resolvedId =\r\n              doc.product_id || firstData.id || doc.id || `product-${Math.random().toString(36).substring(2, 9)}`;\r\n\r\n            const productSlug = slugify(doc.name || firstData.name || resolvedId);\r\n\r\n            return {\r\n              id: String(resolvedId),\r\n              displayName: firstData.name || doc.name || \"\",\r\n              displayPrice:\r\n                Number(firstData.selling_price) ||\r\n                Number(doc.real_selling_price) ||\r\n                Number(doc.selling_price) ||\r\n                0,\r\n              displayDiscount:\r\n                Number(firstData.discount_price) ||\r\n                Number(doc.discount_price) ||\r\n                0,\r\n              sizes,\r\n              displayCategories: categories,\r\n              tags: doc.tags || [],\r\n              slug: productSlug,\r\n              images: parsedData.images || [{ img: doc.img }],\r\n              quantity_available: firstData.product_quantity || doc.quantity_available || 0,\r\n              rawData: doc,\r\n            };\r\n          })\r\n        : [];\r\n\r\n      // Initialize category if not present\r\n      if (!productLists.value[resolvedCatId]) {\r\n        productLists.value[resolvedCatId] = { products: [], currentPage: 1, total: 0 };\r\n      }\r\n\r\n      // Append or replace products\r\n      productLists.value[resolvedCatId].products =\r\n        page === 1 ? data : [...productLists.value[resolvedCatId].products, ...data];\r\n\r\n      productLists.value[resolvedCatId].currentPage = page;\r\n      productLists.value[resolvedCatId].total = res.found || data.length;\r\n    } catch (err) {\r\n      console.error(\"❌ Fetch error:\", err);\r\n      error.value = err?.message || \"Failed to fetch products\";\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  // Getters\r\n  const getProductsByCategory = (categoryId) => {\r\n    return productLists.value[categoryId]?.products || [];\r\n  };\r\n\r\n  const getCurrentPage = (categoryId) => {\r\n    return productLists.value[categoryId]?.currentPage || 1;\r\n  };\r\n\r\n  const getTotalProducts = (categoryId) => {\r\n    return productLists.value[categoryId]?.total || 0;\r\n  };\r\n\r\n  const availableTags = computed(() => {\r\n    const tags = new Set();\r\n    Object.values(productLists.value).forEach((cat) => {\r\n      cat.products.forEach((prod) => prod?.tags?.forEach((t) => tags.add(t)));\r\n    });\r\n    return Array.from(tags);\r\n  });\r\n\r\n  // Auto-fetch\r\n  onMounted(() => fetchProducts());\r\n  watch(\r\n    () => [route.params.parent, route.params.child],\r\n    () => fetchProducts()\r\n  );\r\n\r\n  return {\r\n    productLists,\r\n    loading,\r\n    error,\r\n    fetchProducts,\r\n    getProductsByCategory,\r\n    getCurrentPage,\r\n    getTotalProducts,\r\n    availableTags,\r\n  };\r\n});\r\n"],"version":3}